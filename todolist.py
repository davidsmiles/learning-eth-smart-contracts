import json
from web3 import Web3

ganache_url = 'http://127.0.0.1:7545'
w3 = Web3(Web3.HTTPProvider(ganache_url))

# set up default account
w3.eth.defaultAccount = w3.eth.accounts[1]


# Deploy Contract
abi = json.loads('[{"name": "createTask", "outputs": [], "inputs": [{"type": "string", "name": "_content"}], "stateMutability": "nonpayable", "type": "function", "gas": 269427}, {"name": "read", "outputs": [{"type": "int128", "name": ""}, {"type": "string", "name": ""}, {"type": "bool", "name": ""}], "inputs": [{"type": "int128", "name": "id"}], "stateMutability": "nonpayable", "type": "function", "gas": 13072}, {"name": "update", "outputs": [], "inputs": [{"type": "int128", "name": "id"}, {"type": "string", "name": "content"}], "stateMutability": "nonpayable", "type": "function", "gas": 177748}, {"name": "tasks", "outputs": [{"type": "int128", "name": "id"}, {"type": "string", "name": "content"}, {"type": "bool", "name": "completed"}], "inputs": [{"type": "uint256", "name": "arg0"}], "stateMutability": "view", "type": "function", "gas": 12145}, {"name": "taskCount", "outputs": [{"type": "int128", "name": ""}], "inputs": [], "stateMutability": "view", "type": "function", "gas": 1271}]')
"""
bytecode = '0x6105a256600436101561000d57610598565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263111002aa60005114156101a95734156100ba57600080fd5b60846004356004016101403760646004356004013511156100da57600080fd5b600061014051186100ea57600080fd5b600154606481106100fa57600080fd5b600060c052602060c0200160c052602060c0206001548155610140806001830160c052602060c020602082510161012060006005818352015b8261012051602002111561014657610168565b61012051602002850151610120518501555b8151600101808352811415610133575b50505050505060006002820155506001805460016060518183018060405190131561019257600080fd5b80919012156101a057600080fd5b90509050815550005b63af40ee0e60005114156103305734156101c257600080fd5b606051600435806040519013156101d857600080fd5b80919012156101e657600080fd5b50600154600435126101f757600080fd5b61014080606081806004356064811061020f57600080fd5b600060c052602060c0200160c052602060c02054815250506020820191508082528083018060016004356064811061024657600080fd5b600060c052602060c0200160c052602060c020018060c052602060c02082602082540161012060006005818352015b82610120516020021115610288576102aa565b61012051850154610120516020028501525b8151600101808352811415610275575b5050505050508051806020830101818260206001820306601f8201039050033682375050805160200160206001820306601f82010390509050905081019050602082019150818060026004356064811061030357600080fd5b600060c052602060c0200160c052602060c0200154815250508090509050905060c05260c051610140f350005b63b9a0bac4600051141561041e57341561034957600080fd5b6060516004358060405190131561035f57600080fd5b809190121561036d57600080fd5b50608460243560040161014037606460243560040135111561038e57600080fd5b6001546004351261039e57600080fd5b610140806001600435606481106103b457600080fd5b600060c052602060c0200160c052602060c0200160c052602060c020602082510161012060006005818352015b826101205160200211156103f457610416565b61012051602002850151610120518501555b81516001018083528114156103e1575b505050505050005b638d977672600051141561057057341561043757600080fd5b61014080606081806004356064811061044f57600080fd5b600060c052602060c0200160c052602060c02054815250506020820191508082528083018060016004356064811061048657600080fd5b600060c052602060c0200160c052602060c020018060c052602060c02082602082540161012060006005818352015b826101205160200211156104c8576104ea565b61012051850154610120516020028501525b81516001018083528114156104b5575b5050505050508051806020830101818260206001820306601f8201039050033682375050805160200160206001820306601f82010390509050905081019050602082019150818060026004356064811061054357600080fd5b600060c052602060c0200160c052602060c0200154815250508090509050905060c05260c051610140f350005b63b6cb58a5600051141561059757341561058957600080fd5b60015460005260206000f350005b5b60006000fd5b6100046105a2036100046000396100046105a2036000f3'
compiled_contract = w3.eth.contract(abi=abi, bytecode=bytecode)

# deploy
tx_hash = compiled_contract.constructor().transact()

# get receipt of transaction
tx_receipt = w3.eth.getTransactionReceipt(tx_hash)

"""
# Get the Contract
address = w3.toChecksumAddress('0x892D9a9980073886b836d0270620eEa3AC2E103D')
contract = w3.eth.contract(abi=abi, address=address)

# Add some task
# contract.functions.createTask('Learn blockchain').transact()
# contract.functions.createTask('Learn solidity').transact()
# contract.functions.createTask('Learn vyper').transact()
# contract.functions.createTask('Learn smart contracts').transact()


contract.functions.update(3, 'Learn Vyper Ethereum').transact()

# call some functions
for i in range(0, contract.functions.taskCount().call()):
    tasks = contract.functions.tasks(i).call()
    print(f'{tasks}')

